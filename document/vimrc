" Charles' vimrc

set smartindent
set hlsearch        " Switch on search pattern highlighting.
set incsearch
set nocompatible	" Use Vim defaults (much better!)
set ruler		    " show the cursor position all the time
set bs=2		    " allow backspacing over everything in insert mode
set ch=2            " Make command line two lines high
set history=50		" keep 50 lines of command line history
set nu
set mousehide       " Hide the mouse pointer while typing
"set noai			" always set autoindenting on
"set backup		    " keep a backup file

" Make tab keys to 4 spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set formatoptions=roctq
set foldmethod=indent

set efm+=%f\ \ %l\ \ %m     " for cpplint

syntax enable
au Syntax php   source /home/jiangh/backup/source/php.vim
au Syntax tpl   source /usr/share/vim/vim61/syntax/html.vim
let php_sql_query = 1
let php_baselib = 1
let php_oldStyle = 1
let c_comment_strings=1     " I like highlighting strings inside C comments
syntax on                   " Switch on syntax highlighting.


if has("gui_running")
    set background=light
else
    set background=dark
endif



" Set nice colors
" background for normal text is light grey
" Text below the last line is darker grey
" Cursor is green
" Constants are not underlined but have a slightly lighter background
highlight Normal guibg=grey90
highlight Cursor guibg=Green guifg=NONE
highlight NonText guibg=grey80
highlight Constant gui=NONE guibg=grey95
highlight Special gui=NONE guibg=grey95
highlight Comment term=bold ctermfg=6
highlight Search NONE
highlight Search term=reverse cterm=reverse

" my own set
set fileformats=unix,dos

" make file
func! CompileGcc()
    exec "w"
    let compilecmd="!gcc "
    "let compileflag="-o %< "
    let compileflag="-o main "
    if search("mpi\.h") != 0
        let compilecmd = "!mpicc "
    endif
    if search("glut\.h") != 0
        let compileflag .= " -lglut -lGLU -lGL "
    endif
    if search("cv\.h") != 0
        let compileflag .= " -lcv -lhighgui -lcvaux "
    endif
    if search("omp\.h") != 0
        let compileflag .= " -fopenmp "
    endif
    if search("math\.h") != 0
        let compileflag .= " -lm "
    endif
    exec compilecmd." % ".compileflag
    endfunc

func! CompileGpp()
    exec "w"
    let compilecmd="!g++ "
    let compileflag="-o main "
    if search("mpi\.h") != 0
        let compilecmd = "!mpic++ "
    endif
    if search("glut\.h") != 0
        let compileflag .= " -lglut -lGLU -lGL "
    endif
    if search("cv\.h") != 0
        let compileflag .= " -lcv -lhighgui -lcvaux "
    endif
    if search("omp\.h") != 0
        let compileflag .= " -fopenmp "
    endif
    if search("math\.h") != 0
        let compileflag .= " -lm "
    endif
    exec compilecmd." % ".compileflag
    endfunc

func! RunPython()
    exec "!python %"
    endfunc

func! CompileJava()
    exec "!javac %"
    endfunc

func! CompileCode()
    exec "w"
    if &filetype == "cpp"
        exec "call CompileGpp()"
    elseif &filetype == "c"
        exec "call CompileGcc()"
    elseif &filetype == "python"
        exec "call RunPython()"
    elseif &filetype == "java"
        exec "call CompileJava()"
    endif
    endfunc

func! RunResult()
    exec "w"
    if search("mpi\.h") != 0
        exec "!mpirun -np 4 ./main"
    elseif &filetype == "cpp"
        exec "! ./main"
    elseif &filetype == "c"
        exec "! ./main"
    elseif &filetype == "python"
        exec "call RunPython"
    elseif &filetype == "java"
        exec "!java %<"
    endif
    endfunc

map <F5> :call CompileCode()<CR>
imap <F5> <ESC>:call CompileCode()<CR>
vmap <F5> <ESC>:call CompileCode()<CR>

 map <F6> :call RunResult()<CR>

set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936
set helplang=cn
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>
